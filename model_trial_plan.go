/*
Sumo Logic Organizations Management API

Welcome to the Sumo Logic's API Reference for Organizations Management. You can use these APIs to interact with the Sumo Logic platform to manage accounts and subscription. Refer to [API Authentication](https://help.sumologic.com/APIs/General-API-Information/API-Authentication) for more information about authentication. You can also look at [other APIs](https://help.sumologic.com/APIs) for more information about some other API endpoints. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TrialPlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrialPlan{}

// TrialPlan struct for TrialPlan
type TrialPlan struct {
	Plan
	// The number of days left before the Trial period expires. Post expiry, the Trial plan will default to Free.
	DaysLeft int32 `json:"daysLeft"`
}

type _TrialPlan TrialPlan

// NewTrialPlan instantiates a new TrialPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrialPlan(daysLeft int32, planName string) *TrialPlan {
	this := TrialPlan{}
	this.PlanName = planName
	this.DaysLeft = daysLeft
	return &this
}

// NewTrialPlanWithDefaults instantiates a new TrialPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrialPlanWithDefaults() *TrialPlan {
	this := TrialPlan{}
	return &this
}

// GetDaysLeft returns the DaysLeft field value
func (o *TrialPlan) GetDaysLeft() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DaysLeft
}

// GetDaysLeftOk returns a tuple with the DaysLeft field value
// and a boolean to check if the value has been set.
func (o *TrialPlan) GetDaysLeftOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DaysLeft, true
}

// SetDaysLeft sets field value
func (o *TrialPlan) SetDaysLeft(v int32) {
	o.DaysLeft = v
}

func (o TrialPlan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrialPlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedPlan, errPlan := json.Marshal(o.Plan)
	if errPlan != nil {
		return map[string]interface{}{}, errPlan
	}
	errPlan = json.Unmarshal([]byte(serializedPlan), &toSerialize)
	if errPlan != nil {
		return map[string]interface{}{}, errPlan
	}
	toSerialize["daysLeft"] = o.DaysLeft
	return toSerialize, nil
}

func (o *TrialPlan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"daysLeft",
		"planName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrialPlan := _TrialPlan{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrialPlan)

	if err != nil {
		return err
	}

	*o = TrialPlan(varTrialPlan)

	return err
}

type NullableTrialPlan struct {
	value *TrialPlan
	isSet bool
}

func (v NullableTrialPlan) Get() *TrialPlan {
	return v.value
}

func (v *NullableTrialPlan) Set(val *TrialPlan) {
	v.value = val
	v.isSet = true
}

func (v NullableTrialPlan) IsSet() bool {
	return v.isSet
}

func (v *NullableTrialPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrialPlan(val *TrialPlan) *NullableTrialPlan {
	return &NullableTrialPlan{value: val, isSet: true}
}

func (v NullableTrialPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrialPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


