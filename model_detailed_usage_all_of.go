/*
Sumo Logic Organizations Management API

Welcome to the Sumo Logic's API Reference for Organizations Management. You can use these APIs to interact with the Sumo Logic platform to manage accounts and subscription. Refer to [API Authentication](https://help.sumologic.com/APIs/General-API-Information/API-Authentication) for more information about authentication. You can also look at [other APIs](https://help.sumologic.com/APIs) for more information about some other API endpoints. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DetailedUsageAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetailedUsageAllOf{}

// DetailedUsageAllOf struct for DetailedUsageAllOf
type DetailedUsageAllOf struct {
	// Contains details of the credits used per product variable.
	Usages []UsagePerProductVariable `json:"usages"`
}

type _DetailedUsageAllOf DetailedUsageAllOf

// NewDetailedUsageAllOf instantiates a new DetailedUsageAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetailedUsageAllOf(usages []UsagePerProductVariable) *DetailedUsageAllOf {
	this := DetailedUsageAllOf{}
	this.Usages = usages
	return &this
}

// NewDetailedUsageAllOfWithDefaults instantiates a new DetailedUsageAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailedUsageAllOfWithDefaults() *DetailedUsageAllOf {
	this := DetailedUsageAllOf{}
	return &this
}

// GetUsages returns the Usages field value
func (o *DetailedUsageAllOf) GetUsages() []UsagePerProductVariable {
	if o == nil {
		var ret []UsagePerProductVariable
		return ret
	}

	return o.Usages
}

// GetUsagesOk returns a tuple with the Usages field value
// and a boolean to check if the value has been set.
func (o *DetailedUsageAllOf) GetUsagesOk() ([]UsagePerProductVariable, bool) {
	if o == nil {
		return nil, false
	}
	return o.Usages, true
}

// SetUsages sets field value
func (o *DetailedUsageAllOf) SetUsages(v []UsagePerProductVariable) {
	o.Usages = v
}

func (o DetailedUsageAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetailedUsageAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["usages"] = o.Usages
	return toSerialize, nil
}

func (o *DetailedUsageAllOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"usages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDetailedUsageAllOf := _DetailedUsageAllOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDetailedUsageAllOf)

	if err != nil {
		return err
	}

	*o = DetailedUsageAllOf(varDetailedUsageAllOf)

	return err
}

type NullableDetailedUsageAllOf struct {
	value *DetailedUsageAllOf
	isSet bool
}

func (v NullableDetailedUsageAllOf) Get() *DetailedUsageAllOf {
	return v.value
}

func (v *NullableDetailedUsageAllOf) Set(val *DetailedUsageAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDetailedUsageAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDetailedUsageAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetailedUsageAllOf(val *DetailedUsageAllOf) *NullableDetailedUsageAllOf {
	return &NullableDetailedUsageAllOf{value: val, isSet: true}
}

func (v NullableDetailedUsageAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetailedUsageAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


