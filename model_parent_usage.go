/*
Sumo Logic Organizations Management API

Welcome to the Sumo Logic's API Reference for Organizations Management. You can use these APIs to interact with the Sumo Logic platform to manage accounts and subscription. Refer to [API Authentication](https://help.sumologic.com/APIs/General-API-Information/API-Authentication) for more information about authentication. You can also look at [other APIs](https://help.sumologic.com/APIs) for more information about some other API endpoints. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ParentUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParentUsage{}

// ParentUsage struct for ParentUsage
type ParentUsage struct {
	// Denotes the total number of credits provisioned for the child organization to use.
	TotalCapacity float64 `json:"totalCapacity"`
	// Denotes the total number of credits that have been utilized.
	TotalCreditsUsed float64 `json:"totalCreditsUsed"`
	// Denotes the total number of credits that have been allocated to the child organizations.
	CreditsAllocated float64 `json:"creditsAllocated"`
}

type _ParentUsage ParentUsage

// NewParentUsage instantiates a new ParentUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParentUsage(totalCapacity float64, totalCreditsUsed float64, creditsAllocated float64) *ParentUsage {
	this := ParentUsage{}
	this.TotalCapacity = totalCapacity
	this.TotalCreditsUsed = totalCreditsUsed
	this.CreditsAllocated = creditsAllocated
	return &this
}

// NewParentUsageWithDefaults instantiates a new ParentUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParentUsageWithDefaults() *ParentUsage {
	this := ParentUsage{}
	return &this
}

// GetTotalCapacity returns the TotalCapacity field value
func (o *ParentUsage) GetTotalCapacity() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalCapacity
}

// GetTotalCapacityOk returns a tuple with the TotalCapacity field value
// and a boolean to check if the value has been set.
func (o *ParentUsage) GetTotalCapacityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCapacity, true
}

// SetTotalCapacity sets field value
func (o *ParentUsage) SetTotalCapacity(v float64) {
	o.TotalCapacity = v
}

// GetTotalCreditsUsed returns the TotalCreditsUsed field value
func (o *ParentUsage) GetTotalCreditsUsed() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalCreditsUsed
}

// GetTotalCreditsUsedOk returns a tuple with the TotalCreditsUsed field value
// and a boolean to check if the value has been set.
func (o *ParentUsage) GetTotalCreditsUsedOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCreditsUsed, true
}

// SetTotalCreditsUsed sets field value
func (o *ParentUsage) SetTotalCreditsUsed(v float64) {
	o.TotalCreditsUsed = v
}

// GetCreditsAllocated returns the CreditsAllocated field value
func (o *ParentUsage) GetCreditsAllocated() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.CreditsAllocated
}

// GetCreditsAllocatedOk returns a tuple with the CreditsAllocated field value
// and a boolean to check if the value has been set.
func (o *ParentUsage) GetCreditsAllocatedOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditsAllocated, true
}

// SetCreditsAllocated sets field value
func (o *ParentUsage) SetCreditsAllocated(v float64) {
	o.CreditsAllocated = v
}

func (o ParentUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParentUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["totalCapacity"] = o.TotalCapacity
	toSerialize["totalCreditsUsed"] = o.TotalCreditsUsed
	toSerialize["creditsAllocated"] = o.CreditsAllocated
	return toSerialize, nil
}

func (o *ParentUsage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"totalCapacity",
		"totalCreditsUsed",
		"creditsAllocated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParentUsage := _ParentUsage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParentUsage)

	if err != nil {
		return err
	}

	*o = ParentUsage(varParentUsage)

	return err
}

type NullableParentUsage struct {
	value *ParentUsage
	isSet bool
}

func (v NullableParentUsage) Get() *ParentUsage {
	return v.value
}

func (v *NullableParentUsage) Set(val *ParentUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableParentUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableParentUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParentUsage(val *ParentUsage) *NullableParentUsage {
	return &NullableParentUsage{value: val, isSet: true}
}

func (v NullableParentUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParentUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


