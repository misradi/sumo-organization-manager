/*
Sumo Logic Organizations Management API

Welcome to the Sumo Logic's API Reference for Organizations Management. You can use these APIs to interact with the Sumo Logic platform to manage accounts and subscription. Refer to [API Authentication](https://help.sumologic.com/APIs/General-API-Information/API-Authentication) for more information about authentication. You can also look at [other APIs](https://help.sumologic.com/APIs) for more information about some other API endpoints. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BasicUsageAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BasicUsageAllOf{}

// BasicUsageAllOf struct for BasicUsageAllOf
type BasicUsageAllOf struct {
	// The unique identifier of an organization. It consists of the deployment ID and the hexadecimal account ID separated by a dash `-` character.
	OrgId string `json:"orgId"`
}

type _BasicUsageAllOf BasicUsageAllOf

// NewBasicUsageAllOf instantiates a new BasicUsageAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicUsageAllOf(orgId string) *BasicUsageAllOf {
	this := BasicUsageAllOf{}
	this.OrgId = orgId
	return &this
}

// NewBasicUsageAllOfWithDefaults instantiates a new BasicUsageAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicUsageAllOfWithDefaults() *BasicUsageAllOf {
	this := BasicUsageAllOf{}
	return &this
}

// GetOrgId returns the OrgId field value
func (o *BasicUsageAllOf) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *BasicUsageAllOf) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *BasicUsageAllOf) SetOrgId(v string) {
	o.OrgId = v
}

func (o BasicUsageAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BasicUsageAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["orgId"] = o.OrgId
	return toSerialize, nil
}

func (o *BasicUsageAllOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"orgId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBasicUsageAllOf := _BasicUsageAllOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBasicUsageAllOf)

	if err != nil {
		return err
	}

	*o = BasicUsageAllOf(varBasicUsageAllOf)

	return err
}

type NullableBasicUsageAllOf struct {
	value *BasicUsageAllOf
	isSet bool
}

func (v NullableBasicUsageAllOf) Get() *BasicUsageAllOf {
	return v.value
}

func (v *NullableBasicUsageAllOf) Set(val *BasicUsageAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicUsageAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicUsageAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicUsageAllOf(val *BasicUsageAllOf) *NullableBasicUsageAllOf {
	return &NullableBasicUsageAllOf{value: val, isSet: true}
}

func (v NullableBasicUsageAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicUsageAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


