/*
Sumo Logic Organizations Management API

Welcome to the Sumo Logic's API Reference for Organizations Management. You can use these APIs to interact with the Sumo Logic platform to manage accounts and subscription. Refer to [API Authentication](https://help.sumologic.com/APIs/General-API-Information/API-Authentication) for more information about authentication. You can also look at [other APIs](https://help.sumologic.com/APIs) for more information about some other API endpoints. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ParentOrgInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParentOrgInfo{}

// ParentOrgInfo struct for ParentOrgInfo
type ParentOrgInfo struct {
	// Tells whether the parent org can set up trial child orgs subscriptions.
	IsEligibleForTrialOrgs *bool `json:"isEligibleForTrialOrgs,omitempty"`
	// Tells whether the org is subject to deployment charges.
	IsEligibleForDeploymentCharge *bool `json:"isEligibleForDeploymentCharge,omitempty"`
	// List of deployment charges for the customer for setting up child org in each deployment.
	DeploymentCharges []DeploymentCharge `json:"deploymentCharges,omitempty"`
	// Plan name of the account.
	PlanName *string `json:"planName,omitempty"`
}

// NewParentOrgInfo instantiates a new ParentOrgInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParentOrgInfo() *ParentOrgInfo {
	this := ParentOrgInfo{}
	return &this
}

// NewParentOrgInfoWithDefaults instantiates a new ParentOrgInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParentOrgInfoWithDefaults() *ParentOrgInfo {
	this := ParentOrgInfo{}
	return &this
}

// GetIsEligibleForTrialOrgs returns the IsEligibleForTrialOrgs field value if set, zero value otherwise.
func (o *ParentOrgInfo) GetIsEligibleForTrialOrgs() bool {
	if o == nil || IsNil(o.IsEligibleForTrialOrgs) {
		var ret bool
		return ret
	}
	return *o.IsEligibleForTrialOrgs
}

// GetIsEligibleForTrialOrgsOk returns a tuple with the IsEligibleForTrialOrgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentOrgInfo) GetIsEligibleForTrialOrgsOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEligibleForTrialOrgs) {
		return nil, false
	}
	return o.IsEligibleForTrialOrgs, true
}

// HasIsEligibleForTrialOrgs returns a boolean if a field has been set.
func (o *ParentOrgInfo) HasIsEligibleForTrialOrgs() bool {
	if o != nil && !IsNil(o.IsEligibleForTrialOrgs) {
		return true
	}

	return false
}

// SetIsEligibleForTrialOrgs gets a reference to the given bool and assigns it to the IsEligibleForTrialOrgs field.
func (o *ParentOrgInfo) SetIsEligibleForTrialOrgs(v bool) {
	o.IsEligibleForTrialOrgs = &v
}

// GetIsEligibleForDeploymentCharge returns the IsEligibleForDeploymentCharge field value if set, zero value otherwise.
func (o *ParentOrgInfo) GetIsEligibleForDeploymentCharge() bool {
	if o == nil || IsNil(o.IsEligibleForDeploymentCharge) {
		var ret bool
		return ret
	}
	return *o.IsEligibleForDeploymentCharge
}

// GetIsEligibleForDeploymentChargeOk returns a tuple with the IsEligibleForDeploymentCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentOrgInfo) GetIsEligibleForDeploymentChargeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEligibleForDeploymentCharge) {
		return nil, false
	}
	return o.IsEligibleForDeploymentCharge, true
}

// HasIsEligibleForDeploymentCharge returns a boolean if a field has been set.
func (o *ParentOrgInfo) HasIsEligibleForDeploymentCharge() bool {
	if o != nil && !IsNil(o.IsEligibleForDeploymentCharge) {
		return true
	}

	return false
}

// SetIsEligibleForDeploymentCharge gets a reference to the given bool and assigns it to the IsEligibleForDeploymentCharge field.
func (o *ParentOrgInfo) SetIsEligibleForDeploymentCharge(v bool) {
	o.IsEligibleForDeploymentCharge = &v
}

// GetDeploymentCharges returns the DeploymentCharges field value if set, zero value otherwise.
func (o *ParentOrgInfo) GetDeploymentCharges() []DeploymentCharge {
	if o == nil || IsNil(o.DeploymentCharges) {
		var ret []DeploymentCharge
		return ret
	}
	return o.DeploymentCharges
}

// GetDeploymentChargesOk returns a tuple with the DeploymentCharges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentOrgInfo) GetDeploymentChargesOk() ([]DeploymentCharge, bool) {
	if o == nil || IsNil(o.DeploymentCharges) {
		return nil, false
	}
	return o.DeploymentCharges, true
}

// HasDeploymentCharges returns a boolean if a field has been set.
func (o *ParentOrgInfo) HasDeploymentCharges() bool {
	if o != nil && !IsNil(o.DeploymentCharges) {
		return true
	}

	return false
}

// SetDeploymentCharges gets a reference to the given []DeploymentCharge and assigns it to the DeploymentCharges field.
func (o *ParentOrgInfo) SetDeploymentCharges(v []DeploymentCharge) {
	o.DeploymentCharges = v
}

// GetPlanName returns the PlanName field value if set, zero value otherwise.
func (o *ParentOrgInfo) GetPlanName() string {
	if o == nil || IsNil(o.PlanName) {
		var ret string
		return ret
	}
	return *o.PlanName
}

// GetPlanNameOk returns a tuple with the PlanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParentOrgInfo) GetPlanNameOk() (*string, bool) {
	if o == nil || IsNil(o.PlanName) {
		return nil, false
	}
	return o.PlanName, true
}

// HasPlanName returns a boolean if a field has been set.
func (o *ParentOrgInfo) HasPlanName() bool {
	if o != nil && !IsNil(o.PlanName) {
		return true
	}

	return false
}

// SetPlanName gets a reference to the given string and assigns it to the PlanName field.
func (o *ParentOrgInfo) SetPlanName(v string) {
	o.PlanName = &v
}

func (o ParentOrgInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParentOrgInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsEligibleForTrialOrgs) {
		toSerialize["isEligibleForTrialOrgs"] = o.IsEligibleForTrialOrgs
	}
	if !IsNil(o.IsEligibleForDeploymentCharge) {
		toSerialize["isEligibleForDeploymentCharge"] = o.IsEligibleForDeploymentCharge
	}
	if !IsNil(o.DeploymentCharges) {
		toSerialize["deploymentCharges"] = o.DeploymentCharges
	}
	if !IsNil(o.PlanName) {
		toSerialize["planName"] = o.PlanName
	}
	return toSerialize, nil
}

type NullableParentOrgInfo struct {
	value *ParentOrgInfo
	isSet bool
}

func (v NullableParentOrgInfo) Get() *ParentOrgInfo {
	return v.value
}

func (v *NullableParentOrgInfo) Set(val *ParentOrgInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableParentOrgInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableParentOrgInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParentOrgInfo(val *ParentOrgInfo) *NullableParentOrgInfo {
	return &NullableParentOrgInfo{value: val, isSet: true}
}

func (v NullableParentOrgInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParentOrgInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


