/*
Sumo Logic Organizations Management API

Welcome to the Sumo Logic's API Reference for Organizations Management. You can use these APIs to interact with the Sumo Logic platform to manage accounts and subscription. Refer to [API Authentication](https://help.sumologic.com/APIs/General-API-Information/API-Authentication) for more information about authentication. You can also look at [other APIs](https://help.sumologic.com/APIs) for more information about some other API endpoints. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreditsUsedBreakdown type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditsUsedBreakdown{}

// CreditsUsedBreakdown struct for CreditsUsedBreakdown
type CreditsUsedBreakdown struct {
	// The amount of credits used by the organization in form of deployment charge.
	DeploymentChargeCreditsUsed float64 `json:"deploymentChargeCreditsUsed"`
	// The amount of credits used by the organization excluding deployment charge.
	AllocatedCreditsUsed float64 `json:"allocatedCreditsUsed"`
}

type _CreditsUsedBreakdown CreditsUsedBreakdown

// NewCreditsUsedBreakdown instantiates a new CreditsUsedBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditsUsedBreakdown(deploymentChargeCreditsUsed float64, allocatedCreditsUsed float64) *CreditsUsedBreakdown {
	this := CreditsUsedBreakdown{}
	this.DeploymentChargeCreditsUsed = deploymentChargeCreditsUsed
	this.AllocatedCreditsUsed = allocatedCreditsUsed
	return &this
}

// NewCreditsUsedBreakdownWithDefaults instantiates a new CreditsUsedBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditsUsedBreakdownWithDefaults() *CreditsUsedBreakdown {
	this := CreditsUsedBreakdown{}
	return &this
}

// GetDeploymentChargeCreditsUsed returns the DeploymentChargeCreditsUsed field value
func (o *CreditsUsedBreakdown) GetDeploymentChargeCreditsUsed() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.DeploymentChargeCreditsUsed
}

// GetDeploymentChargeCreditsUsedOk returns a tuple with the DeploymentChargeCreditsUsed field value
// and a boolean to check if the value has been set.
func (o *CreditsUsedBreakdown) GetDeploymentChargeCreditsUsedOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentChargeCreditsUsed, true
}

// SetDeploymentChargeCreditsUsed sets field value
func (o *CreditsUsedBreakdown) SetDeploymentChargeCreditsUsed(v float64) {
	o.DeploymentChargeCreditsUsed = v
}

// GetAllocatedCreditsUsed returns the AllocatedCreditsUsed field value
func (o *CreditsUsedBreakdown) GetAllocatedCreditsUsed() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AllocatedCreditsUsed
}

// GetAllocatedCreditsUsedOk returns a tuple with the AllocatedCreditsUsed field value
// and a boolean to check if the value has been set.
func (o *CreditsUsedBreakdown) GetAllocatedCreditsUsedOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllocatedCreditsUsed, true
}

// SetAllocatedCreditsUsed sets field value
func (o *CreditsUsedBreakdown) SetAllocatedCreditsUsed(v float64) {
	o.AllocatedCreditsUsed = v
}

func (o CreditsUsedBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditsUsedBreakdown) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deploymentChargeCreditsUsed"] = o.DeploymentChargeCreditsUsed
	toSerialize["allocatedCreditsUsed"] = o.AllocatedCreditsUsed
	return toSerialize, nil
}

func (o *CreditsUsedBreakdown) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deploymentChargeCreditsUsed",
		"allocatedCreditsUsed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreditsUsedBreakdown := _CreditsUsedBreakdown{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreditsUsedBreakdown)

	if err != nil {
		return err
	}

	*o = CreditsUsedBreakdown(varCreditsUsedBreakdown)

	return err
}

type NullableCreditsUsedBreakdown struct {
	value *CreditsUsedBreakdown
	isSet bool
}

func (v NullableCreditsUsedBreakdown) Get() *CreditsUsedBreakdown {
	return v.value
}

func (v *NullableCreditsUsedBreakdown) Set(val *CreditsUsedBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditsUsedBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditsUsedBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditsUsedBreakdown(val *CreditsUsedBreakdown) *NullableCreditsUsedBreakdown {
	return &NullableCreditsUsedBreakdown{value: val, isSet: true}
}

func (v NullableCreditsUsedBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditsUsedBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


