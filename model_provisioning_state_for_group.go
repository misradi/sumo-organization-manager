/*
Sumo Logic Organizations Management API

Welcome to the Sumo Logic's API Reference for Organizations Management. You can use these APIs to interact with the Sumo Logic platform to manage accounts and subscription. Refer to [API Authentication](https://help.sumologic.com/APIs/General-API-Information/API-Authentication) for more information about authentication. You can also look at [other APIs](https://help.sumologic.com/APIs) for more information about some other API endpoints. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProvisioningStateForGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProvisioningStateForGroup{}

// ProvisioningStateForGroup struct for ProvisioningStateForGroup
type ProvisioningStateForGroup struct {
	// Is the product group enabled for the child organization.
	IsProvisioned *bool `json:"isProvisioned,omitempty"`
	// Whether updating the provisioning state of the child organization is allowed or not.
	IsProvisioningToggleAllowed *bool `json:"isProvisioningToggleAllowed,omitempty"`
}

// NewProvisioningStateForGroup instantiates a new ProvisioningStateForGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvisioningStateForGroup() *ProvisioningStateForGroup {
	this := ProvisioningStateForGroup{}
	var isProvisioned bool = false
	this.IsProvisioned = &isProvisioned
	var isProvisioningToggleAllowed bool = false
	this.IsProvisioningToggleAllowed = &isProvisioningToggleAllowed
	return &this
}

// NewProvisioningStateForGroupWithDefaults instantiates a new ProvisioningStateForGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvisioningStateForGroupWithDefaults() *ProvisioningStateForGroup {
	this := ProvisioningStateForGroup{}
	var isProvisioned bool = false
	this.IsProvisioned = &isProvisioned
	var isProvisioningToggleAllowed bool = false
	this.IsProvisioningToggleAllowed = &isProvisioningToggleAllowed
	return &this
}

// GetIsProvisioned returns the IsProvisioned field value if set, zero value otherwise.
func (o *ProvisioningStateForGroup) GetIsProvisioned() bool {
	if o == nil || IsNil(o.IsProvisioned) {
		var ret bool
		return ret
	}
	return *o.IsProvisioned
}

// GetIsProvisionedOk returns a tuple with the IsProvisioned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningStateForGroup) GetIsProvisionedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsProvisioned) {
		return nil, false
	}
	return o.IsProvisioned, true
}

// HasIsProvisioned returns a boolean if a field has been set.
func (o *ProvisioningStateForGroup) HasIsProvisioned() bool {
	if o != nil && !IsNil(o.IsProvisioned) {
		return true
	}

	return false
}

// SetIsProvisioned gets a reference to the given bool and assigns it to the IsProvisioned field.
func (o *ProvisioningStateForGroup) SetIsProvisioned(v bool) {
	o.IsProvisioned = &v
}

// GetIsProvisioningToggleAllowed returns the IsProvisioningToggleAllowed field value if set, zero value otherwise.
func (o *ProvisioningStateForGroup) GetIsProvisioningToggleAllowed() bool {
	if o == nil || IsNil(o.IsProvisioningToggleAllowed) {
		var ret bool
		return ret
	}
	return *o.IsProvisioningToggleAllowed
}

// GetIsProvisioningToggleAllowedOk returns a tuple with the IsProvisioningToggleAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningStateForGroup) GetIsProvisioningToggleAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsProvisioningToggleAllowed) {
		return nil, false
	}
	return o.IsProvisioningToggleAllowed, true
}

// HasIsProvisioningToggleAllowed returns a boolean if a field has been set.
func (o *ProvisioningStateForGroup) HasIsProvisioningToggleAllowed() bool {
	if o != nil && !IsNil(o.IsProvisioningToggleAllowed) {
		return true
	}

	return false
}

// SetIsProvisioningToggleAllowed gets a reference to the given bool and assigns it to the IsProvisioningToggleAllowed field.
func (o *ProvisioningStateForGroup) SetIsProvisioningToggleAllowed(v bool) {
	o.IsProvisioningToggleAllowed = &v
}

func (o ProvisioningStateForGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProvisioningStateForGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsProvisioned) {
		toSerialize["isProvisioned"] = o.IsProvisioned
	}
	if !IsNil(o.IsProvisioningToggleAllowed) {
		toSerialize["isProvisioningToggleAllowed"] = o.IsProvisioningToggleAllowed
	}
	return toSerialize, nil
}

type NullableProvisioningStateForGroup struct {
	value *ProvisioningStateForGroup
	isSet bool
}

func (v NullableProvisioningStateForGroup) Get() *ProvisioningStateForGroup {
	return v.value
}

func (v *NullableProvisioningStateForGroup) Set(val *ProvisioningStateForGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningStateForGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningStateForGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningStateForGroup(val *ProvisioningStateForGroup) *NullableProvisioningStateForGroup {
	return &NullableProvisioningStateForGroup{value: val, isSet: true}
}

func (v NullableProvisioningStateForGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningStateForGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


