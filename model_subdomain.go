/*
Sumo Logic Organizations Management API

Welcome to the Sumo Logic's API Reference for Organizations Management. You can use these APIs to interact with the Sumo Logic platform to manage accounts and subscription. Refer to [API Authentication](https://help.sumologic.com/APIs/General-API-Information/API-Authentication) for more information about authentication. You can also look at [other APIs](https://help.sumologic.com/APIs) for more information about some other API endpoints. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Subdomain type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subdomain{}

// Subdomain struct for Subdomain
type Subdomain struct {
	// Subdomain login URL of the organization.
	SubdomainLoginUrl string `json:"subdomainLoginUrl"`
}

type _Subdomain Subdomain

// NewSubdomain instantiates a new Subdomain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubdomain(subdomainLoginUrl string) *Subdomain {
	this := Subdomain{}
	this.SubdomainLoginUrl = subdomainLoginUrl
	return &this
}

// NewSubdomainWithDefaults instantiates a new Subdomain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubdomainWithDefaults() *Subdomain {
	this := Subdomain{}
	return &this
}

// GetSubdomainLoginUrl returns the SubdomainLoginUrl field value
func (o *Subdomain) GetSubdomainLoginUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubdomainLoginUrl
}

// GetSubdomainLoginUrlOk returns a tuple with the SubdomainLoginUrl field value
// and a boolean to check if the value has been set.
func (o *Subdomain) GetSubdomainLoginUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubdomainLoginUrl, true
}

// SetSubdomainLoginUrl sets field value
func (o *Subdomain) SetSubdomainLoginUrl(v string) {
	o.SubdomainLoginUrl = v
}

func (o Subdomain) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subdomain) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subdomainLoginUrl"] = o.SubdomainLoginUrl
	return toSerialize, nil
}

func (o *Subdomain) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subdomainLoginUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubdomain := _Subdomain{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubdomain)

	if err != nil {
		return err
	}

	*o = Subdomain(varSubdomain)

	return err
}

type NullableSubdomain struct {
	value *Subdomain
	isSet bool
}

func (v NullableSubdomain) Get() *Subdomain {
	return v.value
}

func (v *NullableSubdomain) Set(val *Subdomain) {
	v.value = val
	v.isSet = true
}

func (v NullableSubdomain) IsSet() bool {
	return v.isSet
}

func (v *NullableSubdomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubdomain(val *Subdomain) *NullableSubdomain {
	return &NullableSubdomain{value: val, isSet: true}
}

func (v NullableSubdomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubdomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


