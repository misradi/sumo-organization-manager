/*
Sumo Logic Organizations Management API

Welcome to the Sumo Logic's API Reference for Organizations Management. You can use these APIs to interact with the Sumo Logic platform to manage accounts and subscription. Refer to [API Authentication](https://help.sumologic.com/APIs/General-API-Information/API-Authentication) for more information about authentication. You can also look at [other APIs](https://help.sumologic.com/APIs) for more information about some other API endpoints. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FeatureActivation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureActivation{}

// FeatureActivation Describes whether the features are enabled or not. This is applicable for features which may not be enabled by default
type FeatureActivation struct {
	// Cloud SIEM Enterprise feature activation
	Cse *bool `json:"cse,omitempty"`
}

// NewFeatureActivation instantiates a new FeatureActivation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureActivation() *FeatureActivation {
	this := FeatureActivation{}
	return &this
}

// NewFeatureActivationWithDefaults instantiates a new FeatureActivation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureActivationWithDefaults() *FeatureActivation {
	this := FeatureActivation{}
	return &this
}

// GetCse returns the Cse field value if set, zero value otherwise.
func (o *FeatureActivation) GetCse() bool {
	if o == nil || IsNil(o.Cse) {
		var ret bool
		return ret
	}
	return *o.Cse
}

// GetCseOk returns a tuple with the Cse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureActivation) GetCseOk() (*bool, bool) {
	if o == nil || IsNil(o.Cse) {
		return nil, false
	}
	return o.Cse, true
}

// HasCse returns a boolean if a field has been set.
func (o *FeatureActivation) HasCse() bool {
	if o != nil && !IsNil(o.Cse) {
		return true
	}

	return false
}

// SetCse gets a reference to the given bool and assigns it to the Cse field.
func (o *FeatureActivation) SetCse(v bool) {
	o.Cse = &v
}

func (o FeatureActivation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureActivation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cse) {
		toSerialize["cse"] = o.Cse
	}
	return toSerialize, nil
}

type NullableFeatureActivation struct {
	value *FeatureActivation
	isSet bool
}

func (v NullableFeatureActivation) Get() *FeatureActivation {
	return v.value
}

func (v *NullableFeatureActivation) Set(val *FeatureActivation) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureActivation) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureActivation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureActivation(val *FeatureActivation) *NullableFeatureActivation {
	return &NullableFeatureActivation{value: val, isSet: true}
}

func (v NullableFeatureActivation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureActivation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


