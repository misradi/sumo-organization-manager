/*
Sumo Logic Organizations Management API

Welcome to the Sumo Logic's API Reference for Organizations Management. You can use these APIs to interact with the Sumo Logic platform to manage accounts and subscription. Refer to [API Authentication](https://help.sumologic.com/APIs/General-API-Information/API-Authentication) for more information about authentication. You can also look at [other APIs](https://help.sumologic.com/APIs) for more information about some other API endpoints. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OrganizationDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationDetails{}

// OrganizationDetails struct for OrganizationDetails
type OrganizationDetails struct {
	// Email address of the account owner.
	Email string `json:"email"`
	// Name of the organization.
	OrganizationName string `json:"organizationName" validate:"regexp=^([a-zA-Z0-9 +%\\\\-@.,_()]+)$"`
	// First name of the account owner.
	FirstName string `json:"firstName"`
	// Last name of the account owner.
	LastName *string `json:"lastName,omitempty"`
}

type _OrganizationDetails OrganizationDetails

// NewOrganizationDetails instantiates a new OrganizationDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationDetails(email string, organizationName string, firstName string) *OrganizationDetails {
	this := OrganizationDetails{}
	this.Email = email
	this.OrganizationName = organizationName
	this.FirstName = firstName
	return &this
}

// NewOrganizationDetailsWithDefaults instantiates a new OrganizationDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationDetailsWithDefaults() *OrganizationDetails {
	this := OrganizationDetails{}
	return &this
}

// GetEmail returns the Email field value
func (o *OrganizationDetails) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *OrganizationDetails) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *OrganizationDetails) SetEmail(v string) {
	o.Email = v
}

// GetOrganizationName returns the OrganizationName field value
func (o *OrganizationDetails) GetOrganizationName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationName
}

// GetOrganizationNameOk returns a tuple with the OrganizationName field value
// and a boolean to check if the value has been set.
func (o *OrganizationDetails) GetOrganizationNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationName, true
}

// SetOrganizationName sets field value
func (o *OrganizationDetails) SetOrganizationName(v string) {
	o.OrganizationName = v
}

// GetFirstName returns the FirstName field value
func (o *OrganizationDetails) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *OrganizationDetails) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *OrganizationDetails) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *OrganizationDetails) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationDetails) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *OrganizationDetails) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *OrganizationDetails) SetLastName(v string) {
	o.LastName = &v
}

func (o OrganizationDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["organizationName"] = o.OrganizationName
	toSerialize["firstName"] = o.FirstName
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	return toSerialize, nil
}

func (o *OrganizationDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"organizationName",
		"firstName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrganizationDetails := _OrganizationDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrganizationDetails)

	if err != nil {
		return err
	}

	*o = OrganizationDetails(varOrganizationDetails)

	return err
}

type NullableOrganizationDetails struct {
	value *OrganizationDetails
	isSet bool
}

func (v NullableOrganizationDetails) Get() *OrganizationDetails {
	return v.value
}

func (v *NullableOrganizationDetails) Set(val *OrganizationDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationDetails(val *OrganizationDetails) *NullableOrganizationDetails {
	return &NullableOrganizationDetails{value: val, isSet: true}
}

func (v NullableOrganizationDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


