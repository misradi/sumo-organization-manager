/*
Sumo Logic Organizations Management API

Welcome to the Sumo Logic's API Reference for Organizations Management. You can use these APIs to interact with the Sumo Logic platform to manage accounts and subscription. Refer to [API Authentication](https://help.sumologic.com/APIs/General-API-Information/API-Authentication) for more information about authentication. You can also look at [other APIs](https://help.sumologic.com/APIs) for more information about some other API endpoints. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListOrganizationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListOrganizationResponse{}

// ListOrganizationResponse struct for ListOrganizationResponse
type ListOrganizationResponse struct {
	// List of organizations with subscription details.
	Data []ReadOrganizationResponse `json:"data"`
	// Next continuation token.
	Next *string `json:"next,omitempty"`
}

type _ListOrganizationResponse ListOrganizationResponse

// NewListOrganizationResponse instantiates a new ListOrganizationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListOrganizationResponse(data []ReadOrganizationResponse) *ListOrganizationResponse {
	this := ListOrganizationResponse{}
	this.Data = data
	return &this
}

// NewListOrganizationResponseWithDefaults instantiates a new ListOrganizationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListOrganizationResponseWithDefaults() *ListOrganizationResponse {
	this := ListOrganizationResponse{}
	return &this
}

// GetData returns the Data field value
func (o *ListOrganizationResponse) GetData() []ReadOrganizationResponse {
	if o == nil {
		var ret []ReadOrganizationResponse
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ListOrganizationResponse) GetDataOk() ([]ReadOrganizationResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ListOrganizationResponse) SetData(v []ReadOrganizationResponse) {
	o.Data = v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *ListOrganizationResponse) GetNext() string {
	if o == nil || IsNil(o.Next) {
		var ret string
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListOrganizationResponse) GetNextOk() (*string, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *ListOrganizationResponse) HasNext() bool {
	if o != nil && !IsNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given string and assigns it to the Next field.
func (o *ListOrganizationResponse) SetNext(v string) {
	o.Next = &v
}

func (o ListOrganizationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListOrganizationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	if !IsNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	return toSerialize, nil
}

func (o *ListOrganizationResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListOrganizationResponse := _ListOrganizationResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListOrganizationResponse)

	if err != nil {
		return err
	}

	*o = ListOrganizationResponse(varListOrganizationResponse)

	return err
}

type NullableListOrganizationResponse struct {
	value *ListOrganizationResponse
	isSet bool
}

func (v NullableListOrganizationResponse) Get() *ListOrganizationResponse {
	return v.value
}

func (v *NullableListOrganizationResponse) Set(val *ListOrganizationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListOrganizationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListOrganizationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListOrganizationResponse(val *ListOrganizationResponse) *NullableListOrganizationResponse {
	return &NullableListOrganizationResponse{value: val, isSet: true}
}

func (v NullableListOrganizationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListOrganizationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


