/*
Sumo Logic Organizations Management API

Welcome to the Sumo Logic's API Reference for Organizations Management. You can use these APIs to interact with the Sumo Logic platform to manage accounts and subscription. Refer to [API Authentication](https://help.sumologic.com/APIs/General-API-Information/API-Authentication) for more information about authentication. You can also look at [other APIs](https://help.sumologic.com/APIs) for more information about some other API endpoints. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DeploymentCharge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentCharge{}

// DeploymentCharge struct for DeploymentCharge
type DeploymentCharge struct {
	// Identifier of the deployment for the child org for which deployment charge is applied.
	DeploymentId *string `json:"deploymentId,omitempty"`
	// Deployment charge is a charge that applies to child orgs deployed in different regions. This number is a percentage applied to the total credits being allocated to the child org.
	DeploymentCharge *float64 `json:"deploymentCharge,omitempty"`
}

// NewDeploymentCharge instantiates a new DeploymentCharge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentCharge() *DeploymentCharge {
	this := DeploymentCharge{}
	return &this
}

// NewDeploymentChargeWithDefaults instantiates a new DeploymentCharge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentChargeWithDefaults() *DeploymentCharge {
	this := DeploymentCharge{}
	return &this
}

// GetDeploymentId returns the DeploymentId field value if set, zero value otherwise.
func (o *DeploymentCharge) GetDeploymentId() string {
	if o == nil || IsNil(o.DeploymentId) {
		var ret string
		return ret
	}
	return *o.DeploymentId
}

// GetDeploymentIdOk returns a tuple with the DeploymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentCharge) GetDeploymentIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeploymentId) {
		return nil, false
	}
	return o.DeploymentId, true
}

// HasDeploymentId returns a boolean if a field has been set.
func (o *DeploymentCharge) HasDeploymentId() bool {
	if o != nil && !IsNil(o.DeploymentId) {
		return true
	}

	return false
}

// SetDeploymentId gets a reference to the given string and assigns it to the DeploymentId field.
func (o *DeploymentCharge) SetDeploymentId(v string) {
	o.DeploymentId = &v
}

// GetDeploymentCharge returns the DeploymentCharge field value if set, zero value otherwise.
func (o *DeploymentCharge) GetDeploymentCharge() float64 {
	if o == nil || IsNil(o.DeploymentCharge) {
		var ret float64
		return ret
	}
	return *o.DeploymentCharge
}

// GetDeploymentChargeOk returns a tuple with the DeploymentCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentCharge) GetDeploymentChargeOk() (*float64, bool) {
	if o == nil || IsNil(o.DeploymentCharge) {
		return nil, false
	}
	return o.DeploymentCharge, true
}

// HasDeploymentCharge returns a boolean if a field has been set.
func (o *DeploymentCharge) HasDeploymentCharge() bool {
	if o != nil && !IsNil(o.DeploymentCharge) {
		return true
	}

	return false
}

// SetDeploymentCharge gets a reference to the given float64 and assigns it to the DeploymentCharge field.
func (o *DeploymentCharge) SetDeploymentCharge(v float64) {
	o.DeploymentCharge = &v
}

func (o DeploymentCharge) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentCharge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeploymentId) {
		toSerialize["deploymentId"] = o.DeploymentId
	}
	if !IsNil(o.DeploymentCharge) {
		toSerialize["deploymentCharge"] = o.DeploymentCharge
	}
	return toSerialize, nil
}

type NullableDeploymentCharge struct {
	value *DeploymentCharge
	isSet bool
}

func (v NullableDeploymentCharge) Get() *DeploymentCharge {
	return v.value
}

func (v *NullableDeploymentCharge) Set(val *DeploymentCharge) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentCharge) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentCharge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentCharge(val *DeploymentCharge) *NullableDeploymentCharge {
	return &NullableDeploymentCharge{value: val, isSet: true}
}

func (v NullableDeploymentCharge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentCharge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


